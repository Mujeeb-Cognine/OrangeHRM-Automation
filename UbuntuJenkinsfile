pipeline {
    agent any

    triggers {
        cron('30 4 * * *') // This will run the pipeline every day at 10:00 AM IST (4:00 AM UTC)
    }

    environment {
        DOCKER_IMAGE = 'selenium/standalone-chrome:latest'
        WORKSPACE_PATH = '/usr/src/app'
    }

    stages {
        stage('Setup') {
            steps {
                script {
                    // Run the Selenium Docker container
                    docker.image(DOCKER_IMAGE).run("-v /dev/shm:/dev/shm", "--net=host", "-d").withRun { container ->

                    // Your existing setup steps
                    // e.g., git clone, environment setup, etc.
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    // Run tests inside the Docker container
                    docker.image(DOCKER_IMAGE).inside {
                        // Update package list
                        sh 'apt-get update'

                        // Install python3-venv package
                        sh 'apt-get install -y python3-venv'

                        // Create a virtual environment
                        sh "/usr/bin/python3 -m venv ${WORKSPACE_PATH}/env"

                        // Activate the virtual environment
                        sh "chmod +x ${WORKSPACE_PATH}/env/bin/activate"
                        sh ". ${WORKSPACE_PATH}/env/bin/activate"

                        // Install dependencies
                        sh "${WORKSPACE_PATH}/env/bin/pip install -r requirements.txt"

                        // Install chromedriver (if needed)
                        // sh "apt-get install -y chromium-chromedriver"

                        // Run pytest with headless option
                        sh "${WORKSPACE_PATH}/env/bin/python -m pytest --junit-xml=report.xml"
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                // Stop and remove the Selenium Docker container
                docker.image(DOCKER_IMAGE).stop()
                docker.image(DOCKER_IMAGE).remove(force: true).withRun { container ->
                // Archive the test reports
                archiveArtifacts 'report.xml'
                junit 'report.xml'

            }
        }

        success {
            // Archive the test reports
            archiveArtifacts 'report.xml'
            junit 'report.xml'
        }
    }
}
